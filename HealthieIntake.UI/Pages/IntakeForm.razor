@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@using HealthieIntake.UI.Models
@using System.Text.Json
@using Microsoft.JSInterop
@implements IDisposable

<PageTitle>Patient Intake Form</PageTitle>

<div class="container mt-4">
    <div class="d-flex align-items-center justify-content-between mb-4">
        <img src="https://i0.wp.com/override.health/wp-content/uploads/2025/08/Override-Logo_Full-Color-e1757963862728.png?w=2860&ssl=1"
             alt="Override Health"
             style="height: 60px;" />
        <h1 class="mb-0">Patient Intake Form</h1>
    </div>

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading form...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <strong>Error:</strong> @errorMessage
        </div>
    }
    else if (form != null)
    {
        <EditForm Model="@formSubmission" OnValidSubmit="@HandleSubmit">
            <!-- Progress Bar -->
            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <small class="text-muted">Overall Progress</small>
                    <small class="text-muted">@GetCompletionPercentage()% Complete</small>
                </div>
                <div class="progress" style="height: 10px;">
                    <div class="progress-bar" role="progressbar"
                         style="width: @GetCompletionPercentage()%;"
                         aria-valuenow="@GetCompletionPercentage()"
                         aria-valuemin="0"
                         aria-valuemax="100"></div>
                </div>
            </div>

            <!-- Progress Indicator -->
            <div class="alert alert-info mb-3">
                <strong>Step @currentStep of @totalSteps:</strong> @GetSectionTitle()
            </div>

            @if (currentStep == 1)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Patient Information</h5>
                        <div class="mb-3">
                            <label for="patientId" class="form-label">Patient Healthie ID <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="patientId" @bind="patientId" required />
                            <div class="form-text">Enter the Healthie patient ID for this form submission</div>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@GetSectionTitle()</h5>

                    @if (currentStep == 6)
                    {
                        <div class="alert alert-info mb-4" role="contentinfo">
                            <p>By signing this form you agree to the following:</p>
                            <p><a href="https://www.override.health/healthie-privacy-policy" target="_blank" rel="noopener">Notice of Privacy Policy</a></p>
                            <p><a href="https://www.override.health/informed-treatment-consent" target="_blank" rel="noopener">Informed Treatment Consent</a></p>
                            <p><a href="https://www.override.health/clinical-policies-procedures" target="_blank" rel="noopener">Clinical Policies & Procedures</a></p>
                        </div>
                    }

                    @foreach (var module in GetModulesForCurrentStep())
                    {
                        @* Skip Patient Agreement header on step 5 *@
                        @if (currentStep == 5 && module.Label != null && module.Label.Contains("Patient Agreement", StringComparison.OrdinalIgnoreCase))
                        {
                            continue;
                        }

                        <div class="mb-3">
                            @if (module.ModType == "label" || module.ModType == "read_only" || module.ModType == "staticText")
                            {
                                <div class="alert alert-info">
                                    @((MarkupString)module.Label)
                                </div>
                            }
                            else
                            {
                                <label class="form-label fw-bold">
                                    @module.Label
                                    @if (module.Required)
                                    {
                                        <span class="text-danger">*</span>
                                    }
                                </label>

                                @switch (module.ModType)
                                {
                                    case "text":
                                        <input type="text" class="form-control"
                                               value="@GetFormAnswer(module.Id)"
                                               @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                               required="@module.Required" />
                                        break;

                                    case "textarea":
                                        <textarea class="form-control" rows="3"
                                                  value="@GetFormAnswer(module.Id)"
                                                  @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                                  required="@module.Required"></textarea>
                                        break;

                                    case "date":
                                        <div class="row g-2" style="max-width: 50%;">
                                            <div class="col-4">
                                                <input type="text" class="form-control"
                                                       value="@GetDateMonth(module.Id)"
                                                       @oninput="@(async (e) => { SetDateMonth(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                                       placeholder="MM"
                                                       maxlength="2"
                                                       required="@module.Required" />
                                            </div>
                                            <div class="col-4">
                                                <input type="text" class="form-control"
                                                       value="@GetDateDay(module.Id)"
                                                       @oninput="@(async (e) => { SetDateDay(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                                       placeholder="DD"
                                                       maxlength="2"
                                                       required="@module.Required" />
                                            </div>
                                            <div class="col-4">
                                                <input type="text" class="form-control"
                                                       value="@GetDateYear(module.Id)"
                                                       @oninput="@(async (e) => { SetDateYear(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                                       placeholder="YYYY"
                                                       maxlength="4"
                                                       required="@module.Required" />
                                            </div>
                                        </div>
                                        break;

                                    case "radio":
                                    case "horizontal_radio":
                                        <div class="mt-2">
                                        @if (module.Label.Equals("Sex", StringComparison.OrdinalIgnoreCase))
                                        {
                                            var sexOptions = new[] { "Female", "Male", "Other" };
                                            foreach (var option in sexOptions)
                                            {
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="radio"
                                                           name="@module.Id"
                                                           id="@($"{module.Id}_{option}")"
                                                           value="@option"
                                                           checked="@(formAnswers.GetValueOrDefault(module.Id) == option)"
                                                           @onchange="@(async () => { SetFormAnswer(module.Id, option); await SaveFormProgress(); })"
                                                           required="@module.Required" />
                                                    <label class="form-check-label" for="@($"{module.Id}_{option}")">
                                                        @option
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else if (module.Label.Equals("Employment status", StringComparison.OrdinalIgnoreCase))
                                        {
                                            var employmentOptions = new[] { "Employed", "Unemployed", "Retired" };
                                            foreach (var option in employmentOptions)
                                            {
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="radio"
                                                           name="@module.Id"
                                                           id="@($"{module.Id}_{option}")"
                                                           value="@option"
                                                           checked="@(formAnswers.GetValueOrDefault(module.Id) == option)"
                                                           @onchange="@(async () => { SetFormAnswer(module.Id, option); await SaveFormProgress(); })"
                                                           required="@module.Required" />
                                                    <label class="form-check-label" for="@($"{module.Id}_{option}")">
                                                        @option
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else if (module.Options != null && module.Options.Any())
                                        {
                                            foreach (var option in module.Options)
                                            {
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="radio"
                                                           name="@module.Id"
                                                           id="@($"{module.Id}_{option}")"
                                                           value="@option"
                                                           checked="@(formAnswers.GetValueOrDefault(module.Id) == option)"
                                                           @onchange="@(async () => { SetFormAnswer(module.Id, option); await SaveFormProgress(); })"
                                                           required="@module.Required" />
                                                    <label class="form-check-label" for="@($"{module.Id}_{option}")">
                                                        @option
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            var legend = GetScaleLegend(module.Label);
                                            var maxValue = (module.Label.Contains("anxious") || module.Label.Contains("worrying") ||
                                                           module.Label.Contains("depressed") || module.Label.Contains("interest or pleasure")) ? 3 : 10;

                                            @if (!string.IsNullOrEmpty(legend))
                                            {
                                                <div class="form-text mb-2">@legend</div>
                                            }
                                            <div>
                                                @for (int i = 0; i <= maxValue; i++)
                                                {
                                                    var value = i.ToString();
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio"
                                                               name="@module.Id"
                                                               id="@($"{module.Id}_{i}")"
                                                               value="@value"
                                                               checked="@(formAnswers.GetValueOrDefault(module.Id) == value)"
                                                               @onchange="@(async () => { SetFormAnswer(module.Id, value); await SaveFormProgress(); })"
                                                               required="@module.Required" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{i}")">
                                                            @i
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        </div>
                                        break;

                                    case "checkbox":
                                        @if (module.Label.Equals("Relationship status", StringComparison.OrdinalIgnoreCase))
                                        {
                                            var relationshipOptions = new[] { "Single", "Married", "Separated / Divorced" };
                                            <div class="mt-2">
                                                @foreach (var option in relationshipOptions)
                                                {
                                                    var optionValue = option;
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                               id="@($"{module.Id}_{optionValue}")"
                                                               checked="@(checkboxSelections.GetValueOrDefault(module.Id)?.Contains(optionValue) ?? false)"
                                                               @onchange="@((ChangeEventArgs e) => HandleCheckboxChange(module.Id, optionValue, (bool)e.Value!))" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{optionValue}")">
                                                            @optionValue
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (module.Label != null && module.Label.Contains("following procedures"))
                                        {
                                            var procedureOptions = new[] {
                                                "Epidural steroid injection",
                                                "Facet joint/medial branch nerve block",
                                                "Radiofrequency Ablation (RFA):",
                                                "Joint injection",
                                                "Trigger point injection",
                                                "Spinal cord stimulation",
                                                "None of the above",
                                                "Other"
                                            };
                                            <div class="mt-2">
                                                @foreach (var option in procedureOptions)
                                                {
                                                    var optionValue = option;
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                               id="@($"{module.Id}_{optionValue}")"
                                                               checked="@(checkboxSelections.GetValueOrDefault(module.Id)?.Contains(optionValue) ?? false)"
                                                               @onchange="@((ChangeEventArgs e) => HandleCheckboxChange(module.Id, optionValue, (bool)e.Value!))" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{optionValue}")">
                                                            @optionValue
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (module.Label != null && module.Label.Contains("tried any of the following"))
                                        {
                                            var therapyOptions = new[] {
                                                "Physical therapy",
                                                "Chiropractic care",
                                                "Massage therapy",
                                                "Heat or ice pool therapy",
                                                "TENS unit",
                                                "Brace / orthotic",
                                                "Acupuncture",
                                                "Biofeedback",
                                                "Interdisciplinary pain education classes",
                                                "None of the above",
                                                "Other"
                                            };
                                            <div class="mt-2">
                                                @foreach (var option in therapyOptions)
                                                {
                                                    var optionValue = option;
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                               id="@($"{module.Id}_{optionValue}")"
                                                               checked="@(checkboxSelections.GetValueOrDefault(module.Id)?.Contains(optionValue) ?? false)"
                                                               @onchange="@((ChangeEventArgs e) => HandleCheckboxChange(module.Id, optionValue, (bool)e.Value!))" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{optionValue}")">
                                                            @optionValue
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (module.Label != null && module.Label.Contains("run in your family"))
                                        {
                                            var familyOptions = new[] {
                                                "Similar pain",
                                                "Arthritis",
                                                "Bleeding Disorder",
                                                "Cancer",
                                                "Depression",
                                                "Substance abuse",
                                                "Other psychological history",
                                                "Other trauma condition",
                                                "None of the above",
                                                "Other"
                                            };
                                            <div class="mt-2">
                                                @foreach (var option in familyOptions)
                                                {
                                                    var optionValue = option;
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                               id="@($"{module.Id}_{optionValue}")"
                                                               checked="@(checkboxSelections.GetValueOrDefault(module.Id)?.Contains(optionValue) ?? false)"
                                                               @onchange="@((ChangeEventArgs e) => HandleCheckboxChange(module.Id, optionValue, (bool)e.Value!))" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{optionValue}")">
                                                            @optionValue
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (module.Label != null && module.Label.Contains("use any of the following"))
                                        {
                                            var substanceOptions = new[] {
                                                "Alcohol",
                                                "Tobacco",
                                                "Cannabis",
                                                "Illicit drugs (street drugs) ",
                                                "Prescription drugs not prescribed to you",
                                                "None of the above",
                                                "Other"
                                            };
                                            <div class="mt-2">
                                                @foreach (var option in substanceOptions)
                                                {
                                                    var optionValue = option;
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                               id="@($"{module.Id}_{optionValue}")"
                                                               checked="@(checkboxSelections.GetValueOrDefault(module.Id)?.Contains(optionValue) ?? false)"
                                                               @onchange="@((ChangeEventArgs e) => HandleCheckboxChange(module.Id, optionValue, (bool)e.Value!))" />
                                                        <label class="form-check-label" for="@($"{module.Id}_{optionValue}")">
                                                            @optionValue
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <input type="text" class="form-control"
                                                   value="@GetFormAnswer(module.Id)"
                                                   @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                                   placeholder="Enter comma-separated values"
                                                   required="@module.Required" />
                                            <div class="form-text">Enter multiple selections separated by commas</div>
                                        }
                                        break;

                                    case "location":
                                        <input type="text" class="form-control"
                                               id="@($"address-{module.Id}")"
                                               value="@GetFormAnswer(module.Id)"
                                               @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                               placeholder="Start typing your address..."
                                               autocomplete="off"
                                               required="@module.Required"
                                               @ref="addressInputRef" />
                                        break;

                                    case "signature":
                                        <input type="text" class="form-control"
                                               value="@GetFormAnswer(module.Id)"
                                               @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                               placeholder="Type your full name as signature"
                                               required="@module.Required" />
                                        break;

                                    case "BMI(in.)":
                                        bmiModuleId = module.Id;
                                        <div class="row g-2">
                                            <div class="col-md-4">
                                                <label class="form-label">Height (Feet)</label>
                                                <select class="form-select" @bind="heightFeet" @bind:after="@(async () => await CalculateBMI())" style="height: 38px;">
                                                    <option value="">Select</option>
                                                    @for (int i = 3; i <= 8; i++)
                                                    {
                                                        <option value="@i">@i ft</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Height (Inches)</label>
                                                <select class="form-select" @bind="heightInches" @bind:after="@(async () => await CalculateBMI())" style="height: 38px;">
                                                    <option value="">Select</option>
                                                    @for (int i = 0; i <= 11; i++)
                                                    {
                                                        <option value="@i">@i in</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Weight (lbs)</label>
                                                <input type="number" class="form-control" @bind="weight" @bind:after="@(async () => await CalculateBMI())" placeholder="lbs" style="height: 38px;" />
                                            </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(heightFeet) && !string.IsNullOrEmpty(heightInches) && !string.IsNullOrEmpty(weight))
                                        {
                                            var calculatedBmi = CalculateBMIValue();
                                            <div class="mt-2">
                                                <strong>BMI: @calculatedBmi.ToString("F1")</strong>
                                            </div>
                                        }
                                        break;

                                    default:
                                        <input type="text" class="form-control"
                                               value="@GetFormAnswer(module.Id)"
                                               @oninput="@(async (e) => { SetFormAnswer(module.Id, e.Value?.ToString() ?? string.Empty); await SaveFormProgress(); })"
                                               required="@module.Required" />
                                        break;
                                }
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Navigation Buttons -->
            <div class="mt-4 mb-5 d-flex justify-content-between">
                <div>
                    @if (currentStep > 1)
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="PreviousStep">
                            &larr; Previous
                        </button>
                    }
                </div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-danger" @onclick="ClearAndStartOver">
                        Clear & Start Over
                    </button>
                    <button type="button" class="btn btn-outline-primary" @onclick="SaveAndExit">
                        Save & Exit
                    </button>
                </div>
                <div>
                    @if (currentStep < totalSteps)
                    {
                        <button type="button" class="btn btn-primary" @onclick="NextStep">
                            Next &rarr;
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary btn-lg" disabled="@submitting">
                            @if (submitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span>Submit Form</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </EditForm>

        @if (successMessage != null)
        {
            <div class="alert alert-success">
                <strong>Success!</strong> @successMessage
            </div>
        }
    }
</div>

@code {
    private CustomModuleForm? form;
    private Dictionary<string, string> formAnswers = new();
    private FormAnswerGroupInput formSubmission = new();
    private string patientId = "3642270"; // Default to test patient
    private bool loading = true;
    private bool submitting = false;
    private string? errorMessage;
    private string? successMessage;
    private string formId = "2215494";

    // Date fields - separate month, day, year
    private Dictionary<string, string> dateMonths = new();
    private Dictionary<string, string> dateDays = new();
    private Dictionary<string, string> dateYears = new();

    // Checkbox fields - track multiple selections
    private Dictionary<string, HashSet<string>> checkboxSelections = new();

    // BMI calculator fields
    private string heightFeet = "";
    private string heightInches = "";
    private string weight = "";
    private string? bmiModuleId;

    // Mapbox integration
    private ElementReference addressInputRef;
    private DotNetObjectReference<IntakeForm>? dotNetHelper;
    private string? addressModuleId;
    private bool mapboxInitialized = false;

    // Multi-step navigation
    private int currentStep = 1;
    private const int totalSteps = 6;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiBaseUrl = Configuration["ApiBaseUrl"];
            var response = await Http.GetFromJsonAsync<CustomModuleForm>($"{apiBaseUrl}/api/healthie/forms/{formId}");

            if (response != null)
            {
                form = response;
                // Initialize answers dictionary
                foreach (var module in form.CustomModules)
                {
                    if (module.ModType == "label" || module.ModType == "read_only")
                    {
                        continue;
                    }

                    if (module.ModType == "date")
                    {
                        dateMonths[module.Id] = string.Empty;
                        dateDays[module.Id] = string.Empty;
                        dateYears[module.Id] = string.Empty;
                    }
                    else if (module.ModType == "checkbox" &&
                            (module.Label.Equals("Relationship status", StringComparison.OrdinalIgnoreCase) ||
                             (module.Label != null && module.Label.Contains("following procedures")) ||
                             (module.Label != null && module.Label.Contains("tried any of the following")) ||
                             (module.Label != null && module.Label.Contains("run in your family")) ||
                             (module.Label != null && module.Label.Contains("use any of the following"))))
                    {
                        checkboxSelections[module.Id] = new HashSet<string>();
                    }
                    else
                    {
                        SetFormAnswer(module.Id, string.Empty);
                    }
                }

                // Load saved progress from localStorage
                await LoadFormProgress();

                // Find the address module ID
                var addressModule = form.CustomModules.FirstOrDefault(m => m.ModType == "location");
                if (addressModule != null)
                {
                    addressModuleId = addressModule.Id;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load form: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"OnAfterRenderAsync called. firstRender={firstRender}, addressModuleId={addressModuleId}, loading={loading}, mapboxInitialized={mapboxInitialized}");

        // Wait until data is loaded, we have the addressModuleId, we're on step 2, and haven't initialized yet
        if (!loading && addressModuleId != null && currentStep == 2 && !mapboxInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", "About to initialize Mapbox...");

                // Create the .NET object reference for JavaScript callbacks if not already created
                if (dotNetHelper == null)
                {
                    dotNetHelper = DotNetObjectReference.Create(this);
                }

                // Get Mapbox access token from configuration
                var mapboxToken = Configuration["MapboxAccessToken"] ?? "";

                await JSRuntime.InvokeVoidAsync("console.log", $"Access token length: {mapboxToken.Length}");

                if (!string.IsNullOrEmpty(mapboxToken))
                {
                    // Initialize Mapbox autocomplete (will reuse existing if already initialized)
                    await JSRuntime.InvokeVoidAsync("MapboxAutocomplete.initialize",
                        $"address-{addressModuleId}",
                        mapboxToken,
                        dotNetHelper,
                        addressModuleId);

                    mapboxInitialized = true;
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.error", "Mapbox access token not configured");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Failed to initialize Mapbox: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    [JSInvokable]
    public async Task OnAddressSelected(string moduleId, string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            formAnswers[moduleId] = address;
            await SaveFormProgress();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    // Safe dictionary access helpers
    private string GetFormAnswer(string moduleId)
    {
        if (!formAnswers.ContainsKey(moduleId))
        {
            formAnswers[moduleId] = string.Empty;
        }
        return formAnswers[moduleId];
    }

    private void SetFormAnswer(string moduleId, string value)
    {
        formAnswers[moduleId] = value;
    }

    private string GetDateMonth(string moduleId)
    {
        if (!dateMonths.ContainsKey(moduleId))
        {
            dateMonths[moduleId] = string.Empty;
        }
        return dateMonths[moduleId];
    }

    private void SetDateMonth(string moduleId, string value)
    {
        dateMonths[moduleId] = value;
    }

    private string GetDateDay(string moduleId)
    {
        if (!dateDays.ContainsKey(moduleId))
        {
            dateDays[moduleId] = string.Empty;
        }
        return dateDays[moduleId];
    }

    private void SetDateDay(string moduleId, string value)
    {
        dateDays[moduleId] = value;
    }

    private string GetDateYear(string moduleId)
    {
        if (!dateYears.ContainsKey(moduleId))
        {
            dateYears[moduleId] = string.Empty;
        }
        return dateYears[moduleId];
    }

    private void SetDateYear(string moduleId, string value)
    {
        dateYears[moduleId] = value;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(patientId))
        {
            errorMessage = "Patient ID is required";
            return;
        }

        submitting = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var apiBaseUrl = Configuration["ApiBaseUrl"];

            // Combine date parts into YYYY-MM-DD format
            foreach (var moduleId in dateMonths.Keys)
            {
                if (!string.IsNullOrWhiteSpace(dateMonths.GetValueOrDefault(moduleId)) &&
                    !string.IsNullOrWhiteSpace(dateDays.GetValueOrDefault(moduleId)) &&
                    !string.IsNullOrWhiteSpace(dateYears.GetValueOrDefault(moduleId)))
                {
                    var month = dateMonths[moduleId].PadLeft(2, '0');
                    var day = dateDays[moduleId].PadLeft(2, '0');
                    var year = dateYears[moduleId];
                    formAnswers[moduleId] = $"{year}-{month}-{day}";
                }
            }

            // Combine checkbox selections into comma-separated string
            foreach (var kvp in checkboxSelections)
            {
                if (kvp.Value.Count > 0)
                {
                    formAnswers[kvp.Key] = string.Join(", ", kvp.Value);
                }
            }

            formSubmission.CustomModuleFormId = formId;
            formSubmission.UserId = patientId;
            formSubmission.FormAnswers = formAnswers
                .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value))
                .Select(kvp => new FormAnswerInput
                {
                    CustomModuleId = kvp.Key,
                    Answer = kvp.Value
                })
                .ToList();

            var response = await Http.PostAsJsonAsync($"{apiBaseUrl}/api/healthie/forms/submit", formSubmission);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JsonElement>();
                var formAnswerGroupId = result.GetProperty("formAnswerGroupId").GetString();
                successMessage = $"Form submitted successfully! Form Answer Group ID: {formAnswerGroupId}";

                // Clear localStorage after successful submission
                await ClearFormProgress();

                // Clear form
                formAnswers.Clear();
                dateMonths.Clear();
                dateDays.Clear();
                dateYears.Clear();
                checkboxSelections.Clear();
                foreach (var module in form!.CustomModules)
                {
                    if (module.ModType == "label" || module.ModType == "read_only")
                    {
                        continue;
                    }

                    if (module.ModType == "date")
                    {
                        dateMonths[module.Id] = string.Empty;
                        dateDays[module.Id] = string.Empty;
                        dateYears[module.Id] = string.Empty;
                    }
                    else if (module.ModType == "checkbox" &&
                            (module.Label.Equals("Relationship status", StringComparison.OrdinalIgnoreCase) ||
                             (module.Label != null && module.Label.Contains("following procedures")) ||
                             (module.Label != null && module.Label.Contains("tried any of the following")) ||
                             (module.Label != null && module.Label.Contains("run in your family")) ||
                             (module.Label != null && module.Label.Contains("use any of the following"))))
                    {
                        checkboxSelections[module.Id] = new HashSet<string>();
                    }
                    else
                    {
                        SetFormAnswer(module.Id, string.Empty);
                    }
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to submit form: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting form: {ex.Message}";
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task HandleCheckboxChange(string moduleId, string option, bool isChecked)
    {
        if (!checkboxSelections.ContainsKey(moduleId))
        {
            checkboxSelections[moduleId] = new HashSet<string>();
        }

        if (isChecked)
        {
            checkboxSelections[moduleId].Add(option);
        }
        else
        {
            checkboxSelections[moduleId].Remove(option);
        }

        // Save progress to localStorage
        await SaveFormProgress();
    }

    private string GetScaleLegend(string label)
    {
        if (label.Contains("PEG-3") || label.Contains("pain on average"))
        {
            return "0 = No pain, 10 = Pain as bad as you can imagine";
        }
        else if (label.Contains("interfered with") && (label.Contains("enjoyment") || label.Contains("activity") || label.Contains("sleep") || label.Contains("relationships")))
        {
            return "0 = Does not interfere, 10 = Completely interferes";
        }
        else if (label.Contains("overwhelmed") || label.Contains("hopeless"))
        {
            return "0 = Not at all, 10 = All the time";
        }
        else if (label.Contains("anxious") || label.Contains("worrying") || label.Contains("depressed") || label.Contains("interest or pleasure"))
        {
            return "0 = Not at all, 1 = Several days, 2 = More than half the days, 3 = Nearly every day";
        }
        else if (label.Contains("surgery upcoming") || label.Contains("opioid medication") || label.Contains("therapist") || label.Contains("unhealthy relationship"))
        {
            return "0 = No, 10 = Yes";
        }
        return string.Empty;
    }

    // LocalStorage helper methods
    private string GetStorageKey() => $"healthie_intake_{patientId}";

    private async Task SaveFormProgress()
    {
        try
        {
            var progress = new
            {
                patientId = patientId,
                currentStep = currentStep,
                formAnswers = formAnswers,
                dateMonths = dateMonths,
                dateDays = dateDays,
                dateYears = dateYears,
                checkboxSelections = checkboxSelections.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.ToList())
            };

            var json = JsonSerializer.Serialize(progress);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", GetStorageKey(), json);
        }
        catch (Exception ex)
        {
            // Silently fail - localStorage is a nice-to-have feature
            Console.WriteLine($"Failed to save progress: {ex.Message}");
        }
    }

    private async Task LoadFormProgress()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", GetStorageKey());

            if (!string.IsNullOrEmpty(json))
            {
                var progress = JsonSerializer.Deserialize<JsonElement>(json);

                // Load current step
                if (progress.TryGetProperty("currentStep", out var step))
                {
                    currentStep = step.GetInt32();
                }

                // Load formAnswers
                if (progress.TryGetProperty("formAnswers", out var answers))
                {
                    foreach (var prop in answers.EnumerateObject())
                    {
                        formAnswers[prop.Name] = prop.Value.GetString() ?? string.Empty;
                    }
                }

                // Load date fields
                if (progress.TryGetProperty("dateMonths", out var months))
                {
                    foreach (var prop in months.EnumerateObject())
                    {
                        dateMonths[prop.Name] = prop.Value.GetString() ?? string.Empty;
                    }
                }

                if (progress.TryGetProperty("dateDays", out var days))
                {
                    foreach (var prop in days.EnumerateObject())
                    {
                        dateDays[prop.Name] = prop.Value.GetString() ?? string.Empty;
                    }
                }

                if (progress.TryGetProperty("dateYears", out var years))
                {
                    foreach (var prop in years.EnumerateObject())
                    {
                        dateYears[prop.Name] = prop.Value.GetString() ?? string.Empty;
                    }
                }

                // Load checkbox selections
                if (progress.TryGetProperty("checkboxSelections", out var checkboxes))
                {
                    foreach (var prop in checkboxes.EnumerateObject())
                    {
                        var selections = new HashSet<string>();
                        foreach (var item in prop.Value.EnumerateArray())
                        {
                            var value = item.GetString();
                            if (value != null)
                            {
                                selections.Add(value);
                            }
                        }
                        checkboxSelections[prop.Name] = selections;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Silently fail - if we can't load, just start fresh
            Console.WriteLine($"Failed to load progress: {ex.Message}");
        }
    }

    private async Task ClearFormProgress()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", GetStorageKey());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to clear progress: {ex.Message}");
        }
    }

    // Multi-step navigation methods
    private List<CustomModule> GetModulesForCurrentStep()
    {
        if (form == null) return new List<CustomModule>();

        var allModules = form.CustomModules.ToList();

        return currentStep switch
        {
            // Section 1: Introduction + Patient ID (shown separately, just the intro label)
            1 => allModules.Where(m => m.Label.Contains("Thank you for taking")).ToList(),

            // Section 2: Date of birth → Primary care physician
            2 => allModules.Where(m =>
                m.Label.Contains("Date of birth") ||
                m.ModType == "location" ||
                m.Label == "Sex" ||
                m.Label == "BMI" ||
                m.Label.Contains("Referring physician") ||
                m.Label.Contains("Primary care physician")).ToList(),

            // Section 3: Relationship status → Emergency contact
            3 => allModules.Where(m =>
                m.ModType != "location" && (
                m.Label.Contains("Relationship status") ||
                m.Label.Contains("Employment status") ||
                m.Label.Contains("Occupation") ||
                m.Label.Contains("Emergency contact"))).ToList(),

            // Section 4: Pain Assessment section
            4 => allModules.SkipWhile(m => m.Label != "PAIN ASSESSMENT")
                          .TakeWhile(m => m.Label != "MEDICAL HISTORY")
                          .Where(m => m.ModType != "location")
                          .ToList(),

            // Section 5: Medical History section (without Patient Agreement)
            5 => allModules.SkipWhile(m => m.Label != "MEDICAL HISTORY")
                          .TakeWhile(m => !m.Label.Contains("Patient Agreement", StringComparison.OrdinalIgnoreCase) && m.ModType != "signature")
                          .Where(m => m.ModType != "location" &&
                                     !(m.Label != null && m.Label.Contains("Patient Agreement", StringComparison.OrdinalIgnoreCase)))
                          .ToList(),

            // Section 6: Patient Agreement and Signature only
            6 => allModules.Where(m =>
                m.Label == "PATIENT AGREEMENT" ||
                m.ModType == "signature" ||
                (m.Label != null && m.Label.Contains("PATIENT AGREEMENT")))
                          .ToList(),

            _ => new List<CustomModule>()
        };
    }

    private string GetSectionTitle()
    {
        return currentStep switch
        {
            1 => "Welcome",
            2 => "Personal Information",
            3 => "Demographics & Emergency Contact",
            4 => "Pain Assessment",
            5 => "Medical History",
            6 => "Patient Agreement",
            _ => "Patient Intake Form"
        };
    }

    private int GetCompletionPercentage()
    {
        if (form == null || form.CustomModules == null) return 0;

        // Count total required fields (excluding labels and read-only fields)
        var totalFields = form.CustomModules
            .Count(m => m.ModType != "label" && m.ModType != "read_only");

        if (totalFields == 0) return 0;

        // Count completed fields (fields with non-empty values)
        var completedFields = 0;

        foreach (var module in form.CustomModules)
        {
            if (module.ModType == "label" || module.ModType == "read_only") continue;

            if (module.ModType == "date")
            {
                // Date is complete if all three parts are filled
                if (!string.IsNullOrWhiteSpace(dateMonths.GetValueOrDefault(module.Id)) &&
                    !string.IsNullOrWhiteSpace(dateDays.GetValueOrDefault(module.Id)) &&
                    !string.IsNullOrWhiteSpace(dateYears.GetValueOrDefault(module.Id)))
                {
                    completedFields++;
                }
            }
            else if (module.ModType == "checkbox")
            {
                // Checkbox is complete if at least one option is selected
                if (checkboxSelections.GetValueOrDefault(module.Id)?.Count > 0)
                {
                    completedFields++;
                }
            }
            else
            {
                // Other fields are complete if they have a non-empty value
                if (!string.IsNullOrWhiteSpace(formAnswers.GetValueOrDefault(module.Id)))
                {
                    completedFields++;
                }
            }
        }

        // Add patient ID to the count
        if (!string.IsNullOrWhiteSpace(patientId))
        {
            completedFields++;
        }
        totalFields++; // Add 1 for patient ID field

        return (int)Math.Round((double)completedFields / totalFields * 100);
    }

    private async Task NextStep()
    {
        if (currentStep < totalSteps)
        {
            await SaveFormProgress();

            // Destroy Mapbox geocoder when leaving step 2
            if (currentStep == 2 && addressModuleId != null)
            {
                await JSRuntime.InvokeVoidAsync("MapboxAutocomplete.destroy", $"address-{addressModuleId}");
                mapboxInitialized = false;
            }

            currentStep++;
            StateHasChanged();
        }
    }

    private async Task PreviousStep()
    {
        if (currentStep > 1)
        {
            await SaveFormProgress();

            // Destroy Mapbox geocoder when leaving step 2
            if (currentStep == 2 && addressModuleId != null)
            {
                await JSRuntime.InvokeVoidAsync("MapboxAutocomplete.destroy", $"address-{addressModuleId}");
                mapboxInitialized = false;
            }

            currentStep--;
            StateHasChanged();
        }
    }

    private async Task SaveAndExit()
    {
        await SaveFormProgress();
        // Could navigate away or show a message
        successMessage = "Progress saved! You can return to complete the form later.";
    }

    private async Task ClearAndStartOver()
    {
        // Clear localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", GetStorageKey());

        // Reset all form data
        patientId = string.Empty;
        formAnswers.Clear();
        dateMonths.Clear();
        dateDays.Clear();
        dateYears.Clear();
        checkboxSelections.Clear();

        // Reset Mapbox initialization flag
        mapboxInitialized = false;

        // Reset to step 1
        currentStep = 1;

        // Clear any messages
        successMessage = null;
        errorMessage = null;

        // Trigger re-render
        StateHasChanged();
    }

    private double CalculateBMIValue()
    {
        if (string.IsNullOrEmpty(heightFeet) || string.IsNullOrEmpty(heightInches) || string.IsNullOrEmpty(weight))
            return 0;

        if (!int.TryParse(heightFeet, out int feet) || !int.TryParse(heightInches, out int inches) || !double.TryParse(weight, out double weightLbs))
            return 0;

        int totalInches = (feet * 12) + inches;
        if (totalInches == 0) return 0;

        // BMI = (weight in lbs / (height in inches)^2) * 703
        return (weightLbs / (totalInches * totalInches)) * 703;
    }

    private async Task CalculateBMI()
    {
        if (string.IsNullOrEmpty(heightFeet) || string.IsNullOrEmpty(heightInches) || string.IsNullOrEmpty(weight))
            return;

        // Calculate BMI
        var bmi = CalculateBMIValue();

        // Store height in format "5'10""
        var heightFormatted = $"{heightFeet}'{heightInches}\"";

        // Store the calculated values in form answers
        // Note: We're storing these in the BMI module's answer field
        // The API will need to parse this or we might need separate fields
        if (bmiModuleId != null)
        {
            var bmiData = $"Height: {heightFormatted}, Weight: {weight} lbs, BMI: {bmi:F1}";
            SetFormAnswer(bmiModuleId, bmiData);
            await SaveFormProgress();
        }
    }
}
